using System;
using UnityEngine;
using TMPro;

public class TerritoryPoint : MonoBehaviour
{
    public int currentOwner = -1; // -1 = ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏µ‡∏°‡πÑ‡∏´‡∏ô‡∏¢‡∏∂‡∏î, 1 = ‡∏ó‡∏µ‡∏° A, 2 = ‡∏ó‡∏µ‡∏° B
    private int playerAUnits = 0; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏¢‡∏π‡∏ô‡∏¥‡∏ï‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏° A ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
    private int playerBUnits = 0; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏¢‡∏π‡∏ô‡∏¥‡∏ï‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏° B ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
    private float targetCapturePercentage = 0f; // ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏ñ‡∏∂‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∂‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
    private float currentCapturePercentage = 0f; // ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∂‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà

    public TMP_Text territoryStatusText; // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° UI ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏∂‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
    public float captureRadius = 5f; // ‡∏£‡∏±‡∏®‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∂‡∏î‡πÑ‡∏î‡πâ
    private CircleCollider2D territoryCollider; // ‡∏Ñ‡∏≠‡∏•‡∏•‡∏¥‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏¢‡∏π‡∏ô‡∏¥‡∏ï‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
    
    private LineRenderer lineRenderer; // ‡πÄ‡∏™‡πâ‡∏ô‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∂‡∏î
    public float baseCaptureSpeed = 5f; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∂‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà

    private void Awake()
    {
        territoryCollider = gameObject.AddComponent<CircleCollider2D>();
        territoryCollider.radius = captureRadius;
        territoryCollider.isTrigger = true;

        lineRenderer = gameObject.AddComponent<LineRenderer>();
        lineRenderer.positionCount = 50;
        lineRenderer.useWorldSpace = false;

        lineRenderer.material = new Material(Shader.Find("Sprites/Default"));
        lineRenderer.startColor = Color.green;
        lineRenderer.endColor = Color.green;
        lineRenderer.startWidth = 0.1f;
        lineRenderer.endWidth = 0.1f;

        DrawCircle();
    }

    private void DrawCircle()
    {
        float angleStep = 360f / lineRenderer.positionCount;
        for (int i = 0; i < lineRenderer.positionCount; i++)
        {
            float angle = i * angleStep;
            float x = Mathf.Cos(Mathf.Deg2Rad * angle) * captureRadius;
            float y = Mathf.Sin(Mathf.Deg2Rad * angle) * captureRadius;

            lineRenderer.SetPosition(i, new Vector3(x, y, 0f));
        }
    }
    
    private void UpdateTargetCapturePercentage()
    {
        if (playerAUnits > 0 && playerBUnits == 0)
        {
            targetCapturePercentage = 100f;
        }
        else if (playerBUnits > 0 && playerAUnits == 0)
        {
            targetCapturePercentage = 0f;
        }
    }
   
   private void OnTriggerEnter2D(Collider2D collision)
   {
       Unit unit = collision.GetComponent<Unit>();
       if (unit != null)
       {
           if (unit.team == 1)
           {
               if (currentOwner == -1) // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏¢‡∏∂‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
               {
                   playerAUnits++;
               }
               else if (currentOwner == 2) // ‡∏ñ‡πâ‡∏≤‡∏ó‡∏µ‡∏° B ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á
               {
                   playerAUnits++;
               }
           }
           else if (unit.team == 2)
           {
               if (currentOwner == -1) // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏¢‡∏∂‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
               {
                   playerBUnits++;
               }
               else if (currentOwner == 1) // ‡∏ñ‡πâ‡∏≤‡∏ó‡∏µ‡∏° A ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á
               {
                   playerBUnits++;
               }
           }
       }
       UpdateTargetCapturePercentage();
   }

   
   private void OnTriggerExit2D(Collider2D collision)
   {
       Unit unit = collision.GetComponent<Unit>();
       if (unit != null)
       {
           if (unit.team == 1)
           {
               playerAUnits = Mathf.Max(0, playerAUnits - 1);
           }
           else if (unit.team == 2)
           {
               playerBUnits = Mathf.Max(0, playerBUnits - 1);
           }
       }
       UpdateTargetCapturePercentage();
   }

   private void Update()
   {
       int totalUnits = playerAUnits + playerBUnits;
       float captureSpeed = baseCaptureSpeed + (totalUnits * 2f);
       
       // üü¢ team A ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∂‡∏î (‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏µ‡∏° B ‡∏≠‡∏¢‡∏π‡πà)
       if (playerAUnits > 0 && playerBUnits == 0)
       {
           if (currentOwner == 2) // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏ó‡∏µ‡∏° B
           {
               // ‡∏•‡∏î‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏à‡∏≤‡∏Å 100% ‚Üí 0% ‡∏Å‡πà‡∏≠‡∏ô
               currentCapturePercentage = Mathf.MoveTowards(currentCapturePercentage, 0f, captureSpeed * Time.deltaTime);
               if (currentCapturePercentage <= 0f)
               {
                   currentOwner = -1; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡πà‡∏≠‡∏ô
               }
           }
           else
           {
               // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡∏à‡∏≤‡∏Å 0% ‚Üí 100% ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏µ‡∏° A ‡∏¢‡∏∂‡∏î
               currentCapturePercentage = Mathf.MoveTowards(currentCapturePercentage, 100f, captureSpeed * Time.deltaTime);
               if (currentCapturePercentage >= 100f)
               {
                   currentOwner = 1;
                   Debug.Log($"Territory changed owner! New owner: {currentOwner}");
               }
           }
       }
       
       // üî¥ Team B ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∂‡∏î (‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏µ‡∏° A ‡∏≠‡∏¢‡∏π‡πà)
       else if (playerBUnits > 0 && playerAUnits == 0)
       {
           if (currentOwner == 1) // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏ó‡∏µ‡∏° A
           {
               // ‡∏•‡∏î‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏à‡∏≤‡∏Å 100% ‚Üí 0% ‡∏Å‡πà‡∏≠‡∏ô
               currentCapturePercentage = Mathf.MoveTowards(currentCapturePercentage, 0f, captureSpeed * Time.deltaTime);
               if (currentCapturePercentage <= 0f)
               {
                   currentOwner = -1; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡πà‡∏≠‡∏ô
               }
           }
           else
           {
               // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡∏à‡∏≤‡∏Å 0% ‚Üí 100% ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏µ‡∏° B ‡∏¢‡∏∂‡∏î
               currentCapturePercentage = Mathf.MoveTowards(currentCapturePercentage, 100f, captureSpeed * Time.deltaTime);
               if (currentCapturePercentage >= 100f)
               {
                   currentOwner = 2;
                   Debug.Log($"Territory changed owner! New owner: {currentOwner}");
               }
           }
       }
       
       // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Å‡∏≤‡∏£‡∏¢‡∏∂‡∏î‡∏Ñ‡∏£‡∏≠‡∏á
       if (territoryStatusText != null)
       {
           string ownerText = currentOwner switch
           {
               1 => "Team A",
               2 => "Team B",
               _ => "No Owner"
           };
           //territoryStatusText.text = $"Capture: {Mathf.Round(currentCapturePercentage)}%";
           territoryStatusText.text = $"Capture: {Mathf.Round(currentCapturePercentage)}%\nOwner: {ownerText}";
       }
   }
   
   
}
